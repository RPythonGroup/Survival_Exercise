---
title: "생존분석실습"
description: "25.02.03 Cox 생존분석실습과정을 요약하고 PSM(모수적 생존분석모델)을 추가했습니다"
author: "BenKorea feat. ChatGPT"
date: "2025-02-03"
date-modified: last-modified
categories: [R, Survival, hands-on]
---

## Hands-on 실습준비

실제데이터를 가지고 생존분석 단계별 진행과정을 따라할 수 있도록 Quarto 프로젝트를 만들었고 연구회의 Github 원격저장소(repository)에 올려두었습니다. 실습을 위해서는 로컬인 자신의 PC로 원격저장소의 프로젝트 파일들을 cloning(=다운로드)하셔야 합니다.

Cloning을 위해서는 (R과 RStudio만 있는 것이 아니라) Git도 설치되어 있어야 합니다. 혹시라도 나중에 합류한 회원분들 중 Git 등의 설치가 안되어 있으면 [연구회 웹사이트의 해당부분](https://rpythonstudy.github.io/website/posts/tools/git/git_install.html){target="_blank"}을 참고하여 설치해 두시기 바랍니다.

### Cloning(=다운로드)

Git을 이용한 clone은 마치 새로운 프로젝트를 만드는 것과 같습니다. 그래서 Rstudio에서 모든 프로젝트들은 닫은 상태에서 진행하시는 것이 바람직합니다. 윈도우 운영체제에서는 RStudio에서 모든 프로젝트를 다 닫는다면 default working directory상에 RStudio가 열려있게 됩니다. 연구회에서는 default working directory를 - 윈도우의 경우 `C:\Projects\` - WSL2 Ubuntu의 경우 로 미리 지정하는 것으로 추천드렸습니다.

이 상태에서 RStudio Console pane, Terminal tab에서 다음을 실행하면 cloning이 됩니다. 이 때 설치폴더를 아래와 같이 지정하게 됩니다.

```{r cloning, eval=FALSE, filename="RStudio Terminal"}
git clone https://github.com/RPythonGroup/Survival_Exercise.git R443-Survival_Exercise
```

Cloning이 성공적으로 완료되면 RStudio Output pane, File tab에서 R443-Survival_Exercise 폴더가 만들어지게 됩니다.

### RStudio Project로 만들기

이 상태는 아직 RStudio에서 프로젝트로 인식하지 못하고 있는 상태입니다. 이제 RStudio에서 이 폴더를 프로젝트로 인식하게끔 해야 합니다. 이를 위해서는 RStudio에서 File tab에서 New Project를 선택하고, 새로운 디렉토리가 아닌 기존의 디렉토리를 선택하여 프로젝트 만들기를 진행하면, 새로운 프로젝트의 working directory를 선택하라고 하는데 이때, cloning된 디렉토리를 선택하면 cloning된 디렉토리가 RStudio에서 프로젝트로 인식되게 됩니다.

## 패키지 관리

R로 진행하는 프로젝트에서 package를 독립적으로 관리하기 위해서 연구회에서는 `renv` 사용을 추천하고 있으며 clone한 프로젝트도 역시 `renv`로 관리되고 있습니다. 하지만 clone된 상태에서는 renv가 아직 활성화가 되지 않았으므로 아래와 같이 활성화를 먼저 실행합니다.

### renv activation

```{r renv_activation, eval=FALSE, filename="RStudio Console"}
renv::activate()
```

만약에 renv package가 설치되어 있지 않다면, 아래와 같이 설치를 먼저 진행합니다.

```{r renv_install, eval=FALSE, filename="RStudio Console"}
install.packages("renv")
```

적절한 renv::activate 옵션을 선택한 후 진행하면 프로젝트 working directory 하부에 renv 디렉토리가 만들어집니다. 원격저장소의 R 버전이 R-4.4.3이고 local에 설치된 R이 4.1.2라면 renv.lock 파일을 열어서 R 버전을 4.1.2로 수정하고 아래와 같이 restore를 실행합니다.

### renv restore

```{r renv_restore, eval=FALSE, filename="RStudio Console"}
renv::restore()
```

## Hands-on 시작하기

### 데이터 읽어오기

이번 실습에서는 R에서만 사용하는 자료형태인 RDS를 읽어오도록 하겠습니다. 이는 csv 파일이나 엑셀형태의 자료에 비해 자료형이 그대로 보전되고 읽어오는 속도가 더 빠릅니다.

```{r rai_recur}

library(dplyr)

rai_recur <- readRDS("deidentified_data/rai_recur.rds")
```

### 테이터의 개요 파악하기

여러가지 방법이 있겠지만 문건웅선생님의 moonBook 패키지를 이용하여 mytable로 개요를 파악하고자 합니다.

```{r mytable}

library(moonBook)

mytable(recur~.,data=rai_recur)
```

### 생존객체 만들기

실습에 이용되는 자료는 time이 일단위입니다. 이를 연단위로 수정하도록 합니다.

```{r time_unit}

rai_recur$year <- rai_recur$time/365.2422
```

생존분석의 첫단계는 생존객체를 만드는 것입니다. survival package에 포함된 Surv() 함수를 이용합니다. 이 함수는 time과 event를 인자로 받아 특수한 형태의 matrix인 생존(survival) 객체 반환합니다.

str() 함수로 생존객체의 구조를 보면 매우 흥미롭습니다. time은 시간을 나타내고 event는 사건의 발생여부를 나타냅니다. 시간뒤에 +를 부연하는 방식으로 구현되어 있습니다.

```{r Surv}

library(survival)

rai_recur$recur <- as.integer(rai_recur$recur)
km <- Surv(rai_recur$year, event = rai_recur$recur) ## default type : "right"

str(km)
```

head() 함수로 6개의 자료만 확인해보면, 6개의 시간과 +가 있는 경우와 없는 경우가 있음을 알 수 있습니다.

```{r head}

head(km)
```

### 생존곡선 만들기

물론 생존곡선을 그리는 방법은 많습니다. 여기서는 일단 가장 간단한 형태를 먼저 그려 보겠습니다. plot() 함수는 제네릭 함수로, 기본적으로 산점도를 그리지만, Surv 객체를 인자로 받으면 내부적으로 plot.survfit() method를 호출하여 Kaplan-Meier(KM) 곡선을 반환합니다.

```{r plot.survfit}

plot(km) ## km - Surv class (time, status) 가지고 있는 리스트
```

-   Surv 객체는 **survfit 함수의 인자**로 사용되므로 중요

### 중앙값 생존기간

-   50%에 도달하지 못하여 NA 반환됨

```{r median}

median(km)  ## Surv 객체에 대한 method 함수들이 있다.
```

### 평균생존기간

-   데이터셋의 time 변수는 입력단위가 월이므로 재발에 소요된 평균이 약 69개월 ?

```{r mean}

mean(km)
```

## survfit

-   Surv 객체와 공변량을 formula 형태의 인자로 받아 Kaplan-Meier 또는 Cox 모델 기반 생존 확률을 저장한 객체를 반환

### Kaplan-Meier 기반

```{r plot_survfit}

plot(survfit(km~1)) #Kaplan-Meier 기반
```

### cox model 기반

```{r plot_cox}

km_fit <- survfit(km~rai_recur$sex) #cox model 기반

plot(km_fit)
```

### summary

```{r summary1}
summary(km_fit) 
```

### summary 기간지정

```{r summary2}
summary(km_fit, c(12*1:19)) ### 정해진 time에 맞는 생존테이블표를 만든다.
```

### plot 그래프 - 범례추가

```{r plot_cox2}
plot(km_fit, col = rainbow(2), lty=1:2)
legend("topright", legend = c("Female","Male"),
col= rainbow(2), lty=1:2)
```

### ggsurvplot - risk.table 추가하기

```{r ggsurvplot}

library(survminer)

ggsurvplot(
  km_fit, 
  data = rai_recur,
  conf.int = T, 
  xscale = 12, ## xscale can be "d_y"
  break.x.by = 5*12,
  pval = T, 
  pval.size =4, 
  surv.median.line = "hv",
  risk.table = TRUE, ## if TRUE, risk table is displayed under graph
  legend.title="sex", 
  legend.labs=c("Female","Male"),
  palette = c("#E7B800", "#2E9FDF"),
)
```

## coxph

### cox 단변량

$$
h(t | X) = h_0(t) \exp(\beta_1 X_1 + \beta_2 X_2 + \dots + \beta_p X_p)
$$ \#### sex에 대한 단변량

```{r univariate}

univariate_model <- coxph(km ~ sex, data = rai_recur)
summary(univariate_model)
```

#### 1️⃣ 검정 방법의 차이

-   Likelihood Ratio Test: 모델 전체의 적합도를 평가하는 강력한 검정 방법.
-   Wald Test: 개별 회귀 계수가 0과 다른지 평가하지만, 샘플 크기가 작거나 계수가 매우 크면 부정확할 수 있음.
-   Score Test: 작은 샘플에서도 안정적인 검정이지만, 일부 가정이 충족되지 않으면 결과가 다를 수 있음.

#### 2️⃣ 샘플 크기 및 데이터 특성

-   샘플 크기가 작을 때 → Wald Test는 불안정할 수 있음.
-   변수 간 다중공선성 → Wald Test와 LRT 결과가 다를 수 있음.
-   검열 데이터 비율이 높을 때 → Score Test가 다른 두 검정과 다를 수 있음.

#### **📌 (1) Likelihood Ratio Test만 유의미하고 나머지는 유의미하지 않다면?**

-   모델이 전체적으로는 의미가 있지만, 개별 변수의 효과가 강하지 않을 수 있음.\
-   Wald Test와 Score Test도 확인하면서 **개별 변수의 기여도를 분석**해야 함.

#### **📌 (2) Wald Test만 유의미하다면?**

-   특정 변수의 효과는 강하지만, 모델 전체가 데이터를 충분히 설명하지 못할 수 있음.\
-   변수 선택을 다시 검토하고 다중공선성을 점검해야 함.

#### **📌 (3) Score Test만 유의미하다면?**

-   데이터가 잘 맞지만, 특정 변수의 효과가 불확실할 가능성이 있음.\
-   모델의 구조와 데이터의 분포를 다시 확인해야 함.

### cox 단변량 반복

```{r mycph}

mycph(Surv(year, recur) ~ sex+surgeon+Risk+pT+gross_ETE+pN+ENE, data = rai_recur)

```

### Multivariate Analysis

```{r Multivariate}

cox_model1 <- coxph(Surv(year, recur) ~ sex+surgeon+Risk+pT+gross_ETE+pN+ENE, data = rai_recur)
summary(cox_model1)
```

### Multivariate - anova

-   anova(cox_model1)는 Cox 회귀 모델에서 각 변수의 기여도를 평가하는 역할을 함.
-   각 변수가 모델에 얼마나 중요한지 평가하고, p-value를 기반으로 불필요한 변수를 제거할 수 있음.
-   Deviance 값이 크고 p-value가 낮은 변수는 중요한 변수이며, p-value가 높으면 제거를 고려할 수 있음.

```{r anova}

anova(cox_model1)
```

-   Cox 회귀 모델에서는 로그 우도를 최대화(즉, 덜 음수로 만듦) 하는 방향으로 최적화를 수행
    -   NULL 모델 (loglik = -567.06) → 변수가 없는 기본 모델
    -   모델이 점점 좋아질수록 loglik 값 증가
    -   sex 추가 후: loglik = -560.92 (증가)
    -   surgeon 추가 후: loglik = -540.38 (더 증가)
    -   Risk 추가 후: loglik = -521.33 (더 증가)

### Multivariate - refit

```{r refit1}

cox_model_refit <- coxph(Surv(year, recur) ~ sex+surgeon+Risk, data = rai_recur)
summary(cox_model_refit)
```

### survfit plot

```{r plot3}

plot(survfit(cox_model1), ylim = c(0.6,1),xlab = "months",
ylab = "Proportion not reached")
```

## 잔차분석

### year histogram

```{r time_hist}

with(rai_recur, hist(year, breaks = 40, main = "Histogram of year"))
```

### age histogram

```{r age_hist}

with(rai_recur, hist(age, breaks = 16, main = "Histogram of age"))
```

### size histogram

```{r size_hist}

with(rai_recur, hist(size, breaks = 16, main = "Histogram of age"))
```

### age residual

```{r age_residual}

m1 <- coxph(Surv(year,recur)~1,data = rai_recur)
rai_recur$resid <- residuals(m1, type = "martingale")
rai_recur %>% ggplot(aes(age,resid))+geom_point()+geom_smooth()+theme_classic()

```

```{r age_predict}

# 25.02.17 추가
# chatGPT 답변에 따라 age를 공변량으로 한후 risk를 predict하여 그래프화

m2 <- coxph(Surv(year,recur)~age,data = rai_recur)
rai_recur$predicted_hr <- predict(m2, type = "risk")
rai_recur %>% ggplot(aes(age,predicted_hr))+geom_point()+geom_smooth()+theme_classic()

```

### size residual

```{r size_residual}

rai_recur %>% ggplot(aes(size,resid))+geom_point()+geom_smooth()+theme_classic()
```

## 연속형변수와 cox

### cox 단변량 반복2

```{r mycph_all}

mycph(Surv(year, recur) ~ age+sex+surgeon+Risk+pT+size+gross_ETE+pN+ENE, data = rai_recur)

```

### Multivariate Analysis 2

```{r Multivariate_all}

cox_model2 <- coxph(Surv(year, recur) ~ age+sex+surgeon+Risk+pT+size+gross_ETE+pN+ENE, data = rai_recur)
summary(cox_model2)
```

### Multivariate - anova 2

```{r anova2}

anova(cox_model2)
```

### Multivariate refit 2

```{r refit2}

cox_model_refit2 <- coxph(Surv(year, recur) ~ age+sex+surgeon+Risk+size+pN, data = rai_recur)
summary(cox_model_refit2)
```

```{r end}

```

\`\`\` \### psm fit 모델 만들기
